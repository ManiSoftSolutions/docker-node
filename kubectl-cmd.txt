
------------------------------------------------
Kubernetes:System to deploy containerized apps |
------------------------------------------------
Node --> Virtual /physical machine
Pod --> Running one or more Container
Service --> Networking config for the container in kubernetes cluster

-------------------------------------------------------------------------------------------------------------------------------------------------------
Note : do not use minikube created from docker desktop. Use standalone minikube version to create cluster and to use all the functionalities with load balancing / dashboard
-------------------------------------------------------------------------------------------------------------------------------------------------------

kubectl---> cli to interact with kubernetes cluster
minikube ---> one node cluster for development purpose in localhost

Install kubectl using chocolatey
Install virtual box from virtualbox.org if docker desktop is not installed
Install Minikube using chocolatey

1)Download Kubectl & minikube exe files
2) Set env path for Kubectl and minikube

3) kubectl version --client
4) minikube version
5)minikube start
6)minikube status
7)minikube ip

Incase issue with start minikube cluster:
-----------------------------------------
    $ minikube stop
    $ minikube delete  
    $ minikube start  --Note : if docker ip changes update no_proxy to docker ip in env variables
	minikube start --driver=virtualbox ---
	---enable virtualbox and run below command------
	minikube start --vm=true --no-vtx-check

-------------------------------------------------------------------------------------
Note: Refer skaffold.txt and skaffold.yml for automatic deployment into minikube
--------------------------------------------------------------------------------------

useful get commands
----------------
kubectl get namespaces

kubectl get nodes

kubectl get pods OR

kubectl -n test-kube get pods OR

kubectl -n test-kube get pods -o wide

kubectl get services OR

kubectl -n test-kube get services

kubectl describe pods nodeweb-pod

kubectl -n test-kube get deployments

kubectl -n test-kube get pv

kubectl -n test-kube get pvc

kubectl -n test-kube get configmaps

kubectl -n test-kube get secrets

kubectl -n test-kube get ingress

kubectl get namespaces

Logs:
--------
kubectl -n test-kube logs nodeweb-pod


describe:
----------
kubectl -n test-kube describe pod nodeweb-pod 


Namespace:
----------
kubectl create namespace test-kube OR

kubectl apply -f namespace.yaml

--To set default to user defined namespace----

kubens test-kube

			-------------------
			|Kubernetes Object: |
			-------------------
Pod:
----
kubectl apply -f pod.yaml

Service:
-----------
kubectl apply -f servic.yaml

Deployment:
-----------
kubectl apply -f deployments.yaml

PVC:
----
kubectl apply -f pvc.yaml

ConfigMap:
----------
kubectl apply -f postgres-configmap.yaml

Secret:
--------
echo -n 'admin' | base64

echo -n 'YWRtaW4=' | base64 --decode

kubectl create secret generic postgres-secret --from-literal PGPASS=encoded value

Ingress:Load Balancer ---deployment varies by provider(like GC,AWS, Azure)
----------------------
minikube addons enable ingress

kubectl apply -f Ingress-service.yaml

https://kubernetes.github.io/ingress-nginx/deploy/#provider-specific-steps

Also refer Ingress Install links for better understanding




Create multiple objects/resources in a single run:
---------------------------------------------------
kubectl apply -f dirname




update deployment thru command with image version
-------------------------------------------------

kubectl set fieldname objecttype/objectname container-name = tag/version

kubectl -n test-kube set image deployment/nodeweb-deployment nodejscontainer=skmani2/nodeweb:1.0





delete:
-----------
kubectl delete -f config-file.yaml OR

kubectl -n test-kube delete deployment nodeweb-deployment

kubectl -n test-kube delete services nodeweb-srvc

kubectl -n test-kube delete configmaps postgres-config

kubectl -n test-kube delete secrets postgres-secret

delete PV/PVC:
------------------
kubectl -n test-kube delete pv <pv_name> --grace-period=0 --force
	e.g: kubectl -n test-kube delete pvc pvc-claim --grace-period=0 --force

kubectl -n test-kube describe pvc pvc-claim | grep Finalizers
kubectl -n test-kube edit pvc pvc-claim ----comment the finalizers using #

kubectl -n test-kube patch pvc pvc-claim -p "{\"metadata\":{\"finalizers\":null}}"

kubectl -n test-kube patch pvc pvc-claim -p "{\"metadata\":{\"finalizers\": []}}" --type=merge
	
	
Test URL : http://192.168.99.101:30001/

-------------------------------
Docker CLI inside minikube VM:|
-------------------------------

eval $(minikube docker-env) --- unix

@FOR /f "tokens=* delims=^L" %i IN ('minikube docker-env') DO %i --->works only in current terminal in windows

docker system prune - a  -- Remove all the ununsed images from cache


Executing shell/bash Commands in Running container:
----------------------------------------------------
step 1) kubectl exec -it container id -- sh (command prompt for unix) or
		docker run -it image-name sh
		
		Example : kubectl -n test-kube exec -it nodeweb-deployment-7849764d85-5jpzg -- sh

step 2) Run shell commands in the container

Pods: Runs one or more closely related containers (container - running instance of a image)
-----

Deployment: Administers and manages a set of pods
------------


Types of Services: Setup networking in a cluster
---------------------
	- clusterIP ---config file to Access pods inside container or communicate one pod to another pod inside multi-container pods(like redis and nodejs container as a single pod)
				--Exposes a pod to other objects in cluster
	- NodePort -- development purpose and will be used only in local development env
				--Exposes a pod to other objects in cluster
	- LoadBalancer - Legacy way of getting network traffic into a cluster - Applies for only same type of pods/services
	- Ingress - Exposes a set of different services to the outside world 
			Ingress-Nginx - Load balancer
			Ingress Config - Object that has a set of config rules describing how traffic should be routed
			Ingress Controller - Watches for changes to the Ingress and updates the thing that handles traffic in the cluster
				Traffic -> Node Cluster(Ingress controller + thing that routes traffic defined in the Ingress Config ->Routes to appropriate services)

Volumes: data storage
--------
Kubernetes volume - Lifecycle is tied to the pod..when the container inside pod crashes inside deployment. Volume remains same but when pod/deployment crashes volumes get deleted
Persistent volume - Lifecycle is outside of deployment/pod/container. PV is created in the host machine in the cluster statically
Persistent volume claim - Lifecycle is outside of deployment/pod/container. PVC is created in the host machine. If the PV is not having enuf memory in the persistant store then dynamically requested memory will be created
							E.g: if PV is 500Gb but PVC is for 1TB then dynamically PV with 1TB will be created from hard drive

ConfigMaps : config file for env variables from deployment.yaml
-------------

Secret: securely store a piece of information in cluster in the encoded format. Eg: password/apikeys
--------

Dashboard: minikube dashboard ----UI for kubernetes resources