Install Docker Tool box for windows
------------------------------------
Start docker with quick start terminal to start default VM

Optional : create VM and use below commands to override default configs
-----------------------------------------------------------------------
docker-machine create -d virtualbox --virtualbox-memory=2048 --virtualbox-cpu-count=2 --virtualbox-disk-size=40960  --virtualbox-no-vtx-check test

docker-machine start test

docker-machine regenerate-certs test

docker-machine.exe env --shell cmd test

docker-machine.exe ssh test

docker-machine restart test

Replace path for DOCKER_ from env variables to new machine

List docker-machine:
---------------------
docker-machine ls -t 20

Verify docker installation:
---------------------------
1) docker run hello-world

docker override command - these are part of busybox commands
-------------------------------------------------------------

2) docker run busybox echo hi there

3)docker run busybox ls

list of running containers
--------------------------

1) docker ps

2) docker ps --all -> to list all containers created from docker start up

list of docker images
----------------------
docker image ls


docker life cycle
------------------
docker run image= docker create image + docker start -a container id

example : docker create busybox echo hello-world
			docker start -a container id from previous step

Removing stopped Containers
----------------------------
docker system prune ---delete all containers from system

Removing images:
-------------------
docker image rm multi-client:1.0 -f

docker image prune -f

Docker Logs for a Containers
-------------------------------
docker logs container id

Stopping Containers
---------------------
docker ps

docker stop container-id ----graceful stop

docker stop bcbf97194a1c(container-id)

docker kill container-id ----instant stop

Executing shell/bash Commands in Running container:
------------------------------------------
step 1) docker exec -it container id sh (command prompt for unix) or
		docker run -it image-name sh

step 2) Run shell commands in the container

Build docker Image for Application:
-----------------------------------
1) create Dockerfile

Instruction argument
----------  --------
FROM 		base image

WORKDIR     arg

COPY 		arg

RUN 		arg

CMD 		[arg]

Step 2: docker build .

build and tagging an image
-------------------------------
docker build -f Dockerfile.dev .   - (specify file name)

docker build -t doockerid/projectname:version . (.=> current directory which has Dockerfile)

docker build -t kandan/redis:latest .

docker run kandan/redis:latest

port mapping:
---------------
docker run -p machine port(localhost port number):container port(port from image created)  kandan/redis:latest

docker run -p 8080:8080 kandan/redis:latest

URL : http://192.168.99.100:8080/

detached mode:
---------------
docker run -d -p 8080:8080 kandan/redis:latest

creating and running multiple docker container:
------------------------------------------------

use docker compose yml for multiple containers

docker-compose up --build

docker-compose down

restart:'on-failure or always or no' - restart policy to restart on any abnormal exits of container

docker-compose ps - to check status of containers inside compose file

docker login from command:
---------------------------

docker login --username=skmani2

docker tag 88f4ef264d1e kandan/nodeweb:latest 

docker push kandan/nodeweb

------------------------------------------------
Kubernetes:System to deploy containerized apps |
------------------------------------------------
Node --> Virtual /physical machine
Pod --> Running one or more Container
Service --> Networking config for the container in kubernetes cluster


kubectl---> cli to interact with kubernetes cluster
minikube ---> one node cluster for development purpose in localhost

Install kubectl using chocolatey
Install virtual box from virtualbox.org if docker desktop is not installed
Install Minikube using chocolatey

1)Download Kubectl & minikube exe files
2) Set env path for Kubectl and minikube

3) kubectl version --client
4) minikube version
5)minikube start
6)minikube status
7)minikube ip

Incase issue with start minikube cluster:
-----------------------------------------
    $ minikube stop
    $ minikube delete  
    $ minikube start

URL : http://192.168.99.100:30001/

useful commands
----------------
kubectl get nodes

kubectl get pods

kubectl get services

kubectl describe pods nodeweb-pod

Pod:
----
kubectl apply -f pod.yaml


Service:
-----------
kubectl apply -f servic.yaml




